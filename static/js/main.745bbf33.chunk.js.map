{"version":3,"sources":["logo.svg","components/ImageCard/index.js","components/Navbar/index.js","components/Title/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageCard","props","className","currentScore","onClick","selectImage","name","alt","src","image","Navbar","href","message","indexOf","topScore","Title","Wrapper","class","children","App","state","images","unImages","shuffleArray","array","i","length","j","Math","floor","random","undefined","find","item","setState","newImages","filter","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"swCAAAA,EAAOC,QAAU,IAA0B,kC,iOCgB5BC,G,MAbG,SAAAC,GAAK,OACnB,yBAAKC,UACsB,IAAvBD,EAAME,aAAqB,cACzB,QAEF,yBAAKD,UAAU,YACX,uBAAGE,QAAS,kBAAMH,EAAMI,YAAYJ,EAAMK,OAAOJ,UAAU,aACvD,yBAAKA,UAAU,QAAQK,IAAKN,EAAMK,KAAME,IAAKP,EAAMQ,aCSpDC,G,MAhBA,SAAAT,GAAK,OAChB,6BACI,wBAAIC,UAAU,+BACV,4BACI,uBAAGS,KAAK,KAAR,gBAEJ,wBAAIT,WAAqD,IAA1CD,EAAMW,QAAQC,QAAQ,eAAwB,kBAAyD,IAAxCZ,EAAMW,QAAQC,QAAQ,aAAsB,eAAe,eACpIZ,EAAMW,SAEX,wBAAIV,UAAU,cAAd,UACW,0BAAMA,UAAU,gBAAgBD,EAAME,cADjD,iBACmF,0BAAMD,UAAU,YAAYD,EAAMa,eCHlHC,G,MAPD,SAAAd,GAAK,OACf,yBAAKC,UAAU,4BACX,wBAAIA,UAAU,SAAd,eACA,uBAAGA,UAAU,eAAb,2HCGOc,G,MANC,SAAAf,GAAK,OACjB,yBAAKgB,MAAM,aACNhB,EAAMiB,YC4EAC,E,2MApEbC,MAAQ,CACNR,QAAS,2BACTE,SAAU,EACVX,aAAc,EACdkB,OAAQA,EACRC,SAAUD,G,EAMZE,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAQ,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADA,EAEjB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFiC,KAE7BD,EAAMG,GAFuB,O,EAM5CtB,YAAc,SAAAC,GAGZ,QAAiByB,IAFC,EAAKX,MAAME,SAASU,MAAK,SAAAC,GAAI,OAAIA,EAAK3B,OAASA,KAG/D,EAAK4B,SAAS,CACZtB,QAAS,kCACTE,SAAW,EAAKM,MAAMjB,aAAe,EAAKiB,MAAMN,SAAY,EAAKM,MAAMjB,aAAc,EAAKiB,MAAMN,SAChGX,aAAc,EACdkB,OAAQA,EACRC,SAAUD,QAEP,CACL,IAAMc,EAAY,EAAKf,MAAME,SAASc,QAAO,SAAAH,GAAI,OAAIA,EAAK3B,OAASA,KAEnE,EAAK4B,SAAS,CACZtB,QAAS,QACTT,aAAc,EAAKiB,MAAMjB,aAAe,EACxCkB,OAAQA,EACRC,SAAUa,IAId,EAAKZ,aAAaF,I,qHAGV,IAAD,OACP,OACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CACET,QAASyB,KAAKjB,MAAMR,QACpBT,aAAckC,KAAKjB,MAAMjB,aACzBW,SAAUuB,KAAKjB,MAAMN,WAEvB,kBAAC,EAAD,MAGEuB,KAAKjB,MAAMC,OAAOiB,KAAI,SAAA7B,GAAK,OACzB,kBAAC,EAAD,CACEH,KAAMG,EAAMH,KACZG,MAAOA,EAAMA,MACbJ,YAAa,EAAKA,YAClBF,aAAc,EAAKiB,MAAMjB,uB,GA5DnBoC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.745bbf33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst ImageCard = props => (\r\n    <div className={\r\n        props.currentScore === 0 ? \"card cardEx\"\r\n        : \"card\"\r\n    }>\r\n        <div className=\"imageBox\">\r\n            <a onClick={() => props.selectImage(props.name)} className=\"imageLink\">\r\n                <img className=\"image\" alt={props.name} src={props.image} />\r\n            </a>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default ImageCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Navbar = props => (\r\n    <div>\r\n        <ul className=\"nav nav-pills nav-justified\">\r\n            <li>\r\n                <a href=\"/\">Clicky Game</a>\r\n            </li>\r\n            <li className={props.message.indexOf(\"incorrectly\") !== -1 ? \"desc-incorrect\":props.message.indexOf(\"correctly\") !== -1 ? \"desc-correct\":\"desc-normal\"}>\r\n                {props.message}\r\n            </li>\r\n            <li className=\"scoreboard\">\r\n                Score: <span className=\"currentScore\">{props.currentScore}</span> | Top Score: <span className=\"topScore\">{props.topScore}</span>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n)\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Title = props => (\r\n    <div className=\"titleContainer jumbotron\">\r\n        <h1 className=\"title\">Clicky Game</h1>\r\n        <p className=\"description\">Click on a different image each time to get 1 point. Game ends if you click on an image that you previously clicked!</p>\r\n    </div>\r\n);\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Wrapper = props => (\r\n    <div class=\"container\">\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default Wrapper;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//Components\nimport images from './images.json';\nimport ImageCard from './components/ImageCard';\nimport Navbar from './components/Navbar';\nimport Title from './components/Title';\nimport Wrapper from './components/Wrapper';\n\n\nclass App extends Component {\n  state = {\n    message: \"Click an image to begin!\",\n    topScore: 0,\n    currentScore: 0,\n    images: images,\n    unImages: images\n  }\n\n  componentDidMount() {\n  }\n\n  shuffleArray = array => {\n    for (let i = array.length -1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]]\n    }\n  }\n\n  selectImage = name => {\n    const findImage = this.state.unImages.find(item => item.name === name);\n\n    if(findImage === undefined) {\n      this.setState({\n        message: \"You already clicked that image!\",\n        topScore: (this.state.currentScore > this.state.topScore) ? this.state.currentScore: this.state.topScore,\n        currentScore: 0,\n        images: images,\n        unImages: images\n      })\n    } else {\n      const newImages = this.state.unImages.filter(item => item.name !== name);\n\n      this.setState({\n        message: \"Nice!\",\n        currentScore: this.state.currentScore + 1,\n        images: images,\n        unImages: newImages\n      })\n    }\n\n    this.shuffleArray(images);\n  }\n\n  render() {\n    return (\n      <Wrapper >\n      <Navbar\n        message={this.state.message}\n        currentScore={this.state.currentScore}\n        topScore={this.state.topScore}\n        />\n      <Title />\n\n      {\n        this.state.images.map(image => (\n          <ImageCard\n            name={image.name}\n            image={image.image}\n            selectImage={this.selectImage}\n            currentScore={this.state.currentScore}\n            />\n        ))\n      }\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport './general.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}